<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 맵퍼네임 -->
<mapper namespace="kr.happyjob.study.business.dao.ReceiveManagementDao">
	<!-- 거래처 목록 조회 -->
	<select id="selectClientList" resultType="kr.happyjob.study.business.vo.ErpClientVo">
		/*kr.happyjob.study.system.dao.ComnComboDao.selectclientlist*/
		SELECT
			b.client_cd clientCd,
			CONCAT(b.estimate_no,'@', a.client_nm) AS clientNm
		FROM
			tb_erp_client a
		INNER JOIN estimate_info b ON a.client_cd = b.client_cd
		WHERE
			b.loginID = #{loginId}
	</select>

	<!-- 1.  수주서 테이블 목록 조회 -->
	<select id="ReceiveList" resultType="kr.happyjob.study.business.dto.ReceiveListDto" parameterType ="hashmap">
		SELECT	DISTINCT
				tu.name,
				a.client_cd clientCd,
				e.client_nm clientNm,
				e.emp_nm empNm,
				a.receive_num receiveNum,
				a.receive_date receiveDate,
				a.sum_total sumTotal,
				a.supply_amount supplyAmount,
				tu.loginID loginId,
				a.estimate_no estimateNo
		FROM
				tb_receive_info a
		INNER JOIN  estimate_info d ON d.estimate_no = a.estimate_no
        INNER JOIN  tb_erp_client e ON e.client_cd = a.client_cd
        INNER JOIN  tb_userinfo tu ON tu.loginID = a.loginID

		<where>
			<if test="(client_search != null) and (! client_search.equals(''))">
            	AND a.client_cd like #{client_search}
         	</if>
         	<if test="(from_date != null) and (! from_date.equals(''))">
  			 	AND a.receive_date  <![CDATA[>=]]> STR_TO_DATE(#{from_date}, '%Y%m%d%H%i%s')
         	</if>
         	<if test="(to_date != null) and (!to_date.equals(''))">
         		AND a.receive_date  <![CDATA[<=]]> STR_TO_DATE(#{to_date}, '%Y%m%d%H%i%s')
         	</if>         
		</where>
		
		ORDER BY a.receive_num
		LIMIT #{pageIndex}, #{pageSize}
	</select>
	
	<!-- 2. 전체 목록 카운트  -->
	<select id="receiveCnt" resultType="int"  parameterType="hashmap">
	<!-- SELECT COUNT(estimate_no) 검색 및 전체 목록 뿌릴때의 카운트, cliCnt
		 FROM estimate_info -->
		SELECT  
				COUNT(receive_num)
		FROM 
				tb_receive_info

		<where>
			<if test="(client_search != null) and (! client_search.equals(''))">
            	AND client_cd  = #{client_search} <!-- 카운트 값 매칭 -->
         	</if>
         	<if test="(from_date != null) and (! from_date.equals(''))">
				AND receive_date  <![CDATA[>=]]> STR_TO_DATE(#{from_date}, '%Y%m%d%H%i%s')
         	</if>
         	<if test="(to_date != null) and (!to_date.equals(''))">
	         	AND receive_date  <![CDATA[<=]]> STR_TO_DATE(#{to_date}, '%Y%m%d%H%i%s')
         	</if>         
      	</where>
	</select>

	<select id="InsertReceiveInfo" resultType="kr.happyjob.study.business.vo.ReceiveInfoVo">
		SELECT
				receive_num receiveNum,
				loginID loginId,
				client_cd clientCd,
				estimate_no estimateNo,
				supply_val supplyVal,
				supply_tax supplyTax,
				supply_cost supplyCost,
				supply_amount supplyAmount,
				receive_date receiveDate,
				deposit_yn depositYN,
				slip_no slipNo,
				account_cd accountCd,
				sum_total sumTotal,
				remarks
		FROM
		    	tb_receive_info
		WHERE
		    	receive_num = (
									SELECT max(receive_num)  <!--  String타입이라도 마지막에 들어온 번호가 나옴 -->
									FROM tb_receive_info
									WHERE client_cd = #{clientCd}
									AND estimate_no = #{estimateNo}
							   )
		AND
		    	client_cd = #{clientCd}
		AND
		    	estimate_no = #{estimateNo}
	</select>
	
	<!-- 3. 단건조회  -->
	<select id ="selectOemList"  resultType ="kr.happyjob.study.business.model.OeManagementModel" >
		SELECT  DISTINCT
				a.estimate_no,
				a.client_cd,
				a.supply_val,
				a.supply_tax,
				a.supply_cost,
				a.loginID,
				b.client_cd,
				b.limit_date,
				b.estimate_cnt,
				e.cop_no1,
				e.cop_no2,
				e.cop_no3,
				e.client_nm,
				e.emp_nm,
				e.emp_hp,
				e.addr,
				e.addr_detail,
				e.client_nm
		FROM
		    	tb_receive_info a
  	 	INNER JOIN  receive_prod b ON b.estimate_no = a.estimate_no
        <!-- INNER JOIN  tb_scm_product c ON c.product_cd = b.product_cd -->
		<!-- INNER JOIN  estimate_info d ON d.estimate_no = a.estimate_no -->
        INNER JOIN  tb_erp_client e ON e.client_cd = a.client_cd
        INNER JOIN  tb_userinfo tu ON tu.loginID = a.loginID
        <!-- INNER JOIN  tb_acc_slip f ON  f.slip_no = b.slip_no
	          AND 	f.client_cd = e.client_cd
	          AND 	f.detail_account_cd = 203 -->
		WHERE
		    	a.estimate_no = #{estimate_no}
	</select>	

	<!-- !!! 수주서 테이블 +  수주서 제품 테이블 + SCM order 인서트 -->
	<!-- 수주서테이블 -->
	<insert id="receiveInfoInsert" >
		<selectKey resultType="String" keyProperty="receiveNum" order="BEFORE">
			SELECT
					CONCAT (
							c.client_cd,
					    	'-',
					    	DATE_FORMAT(NOW(),'%Y-%m-%d'),
					        '-',
					        LPAD(CAST((CAST(RIGHT(IFNULL(MAX(a.receive_num),
					        CONCAT(c.client_cd,DATE_FORMAT(NOW(),'%Y-%m-%d'))),3) AS unsigned) + 1) AS char),3,'0')
					)
			FROM
			    	tb_receive_info a
			INNER JOIN estimate_info b ON a.client_cd = b.client_cd
			AND	a.estimate_no = b.estimate_no
			INNER JOIN tb_erp_client c ON b.client_cd = c.client_cd
			WHERE
			    	a.client_cd = #{clientCd}
			AND
			    	a.estimate_no = #{estimateNo}
		</selectKey>

		INSERT INTO tb_receive_info (
				receive_num,
				estimate_no,
				client_cd,
				receive_date,
				loginID,
		        deposit_yn
		) VALUES (
				#{receiveNum},
				#{estimateNo},
				#{clientCd},
				NOW(),
				#{loginId},
		      	'n'
		)
	</insert>

	<select id="InsertTableSelect" resultType="kr.happyjob.study.business.dto.InsertTableSelectDto" parameterType="hashmap">
		SELECT
		    	a.receive_num receiveNum,
				a.estimate_no estimateNo,
				a.receive_date receiveDate,
				a.remarks,
				c.client_cd clientCd,
				c.client_nm clientNm,
				c.emp_nm empNm,
				c.tel
		FROM
				tb_receive_info a
		INNER JOIN estimate_info b ON a.client_cd = b.client_cd
		AND	a.estimate_no = b.estimate_no
		INNER JOIN tb_erp_client c ON b.client_cd = c.client_cd
		WHERE
				a.receive_num = (
									SELECT max(receive_num)  <!--  String타입이라도 마지막에 들어온 번호가 나옴 -->
									FROM tb_receive_info
									WHERE client_cd = #{clientCd}
									AND estimate_no = #{estimateNo}
							   )
		AND
				a.client_cd = #{clientCd}
	</select>

	<!-- 수주서 제품 테이블 인서트 -->
	<insert id ="updateInsertOemList">
		<selectKey resultType="String" keyProperty="receive_num" order="BEFORE">
			SELECT
				MAX(receive_num)
			FROM
			tb_receive_info a
			INNER JOIN tb_erp_client b ON a.client_cd = b.client_cd
			WHERE
			b.client_cd = #{client_search1}
		</selectKey>
		INSERT INTO receive_prod (
				client_cd,
				estimate_no,
				product_cd,
				estimate_cnt,
				price,
				tax,
				unit_cost,
				limit_date,
				remarks
		) VALUES (
				#{client_search1},
				(
					SELECT max(estimate_no)  <!--  String타입이라도 마지막에 들어온 번호가 나옴 -->
					FROM tb_receive_info
					WHERE client_cd = #{client_search1}
				),
				#{product_cd},
				#{estimate_cnt},
				(
					SELECT  sp.price
					FROM tb_scm_product sp
					WHERE  sp.product_cd = #{product_cd}
				),
				(
					SELECT  sp2.price  / 10
					FROM tb_scm_product sp2
					WHERE  sp2.product_cd = #{product_cd}
				),
				(
					SELECT  sp3.price + (price  / 10)
					FROM tb_scm_product sp3
					WHERE  sp3.product_cd = #{product_cd}
				),
				#{limit_date},
				#{remarks}
		)
	</insert>

	<!-- scm order table -->
	<insert id ="insertOrderOemList">
		INSERT INTO tb_order (
				order_cd,
				loginID,
				product_cd,
				order_date,
				want_receive_date,
				order_cnt,
				amount,
				tax,
				warehouse_cd,
				offline,
				deposit_yn,
				STTcd
		) VALUES (
				#{order_cd},
				#{loginID},
				#{product_cd},
				DATE_SUB(#{now}, INTERVAL 6 MONTH),
				date_add(now(), interval +7 day),
				#{estimate_cnt},
				(#{supply_cost} * #{estimate_cnt}),
				((#{supply_cost}*0.1) * #{estimate_cnt}),
				(
					SELECT  b.warehouse_cd
					FROM tb_order a
					INNER JOIN tb_scm_product b
					ON  a.#{product_cd} = b.product_cd and a.warehouse_cd = b.warehouse_cd
				),
				'y',
				'n',
				1
		)
	</insert>
			
	<!-- 5.단건삭제 -->
	<delete id="deleteOemList">
			DELETE FROM tb_receive_info 
			WHERE estimate_no = #{estimate_no}
	</delete>

	<!-- 6. 모달 안 리스트 뿌리기  -->
	<select id="oemListDetail" resultType="kr.happyjob.study.business.model.OeManagementModel" parameterType ="hashmap" >
		SELECT
		    	a.estimate_no,
				a.client_cd,
				a.supply_val,
				a.supply_tax,
				a.supply_cost,
				b.client_nm ,
		     	c.product_cd,
		     	c.estimate_cnt,
				d.product_nm
		FROM
		    	tb_receive_info a 									<!-- 견적서 테이블 a  -->
        INNER JOIN tb_erp_client b ON a.client_cd = b.client_cd   	<!-- 거래처 테이블 b . 거래처 이름 가져올려고 조인: 검색조건 -->
        INNER JOIN  receive_prod c ON b.client_cd = c.client_cd 	<!-- 견적서 제품 정보 테이블. 상품 코드 가져올려고 조인 -->
        INNER JOIN tb_scm_product d ON c.product_cd = d.product_cd 	<!-- scm 제품 정보테이블.  scm 제품이름 가져올려고  조인 -->
		WHERE
		    	a.estimate_no = #{estimate_no}
	</select>
	
	<!-- 7.모달 안 리스트 뿌리기 카운트  -->
	<select id="oemDetailCnt" resultType="int"  parameterType="hashmap">
		SELECT
		    	COUNT(a.estimate_no)
		FROM
		    	tb_receive_info a 									<!-- 견적서 테이블 a  -->
        INNER JOIN tb_erp_client b ON a.client_cd = b.client_cd   	<!-- 거래처 테이블 b . 거래처 이름 가져올려고 조인: 검색조건 -->
        INNER JOIN receive_prod c ON b.client_cd = c.client_cd  	<!-- 견적서 제품 정보 테이블. 상품 코드 가져올려고 조인 -->
        INNER JOIN tb_scm_product d ON c.product_cd = d.product_cd 	<!-- scm 제품 정보테이블.  scm 제품이름 가져올려고  조인 -->
		WHERE
		    	a.estimate_no = #{estimate_no}
   </select>
</mapper>